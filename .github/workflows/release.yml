name: Release
on:
  workflow_call:
    inputs:
      workflow_run_id:
        required: true
        type: string
permissions:
  contents: read
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub event payload
        shell: bash
        run: echo "${{ toJson(github.event) }}"

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Git config
        run: |
          git config --global core.longpaths true
          git config --global core.autocrlf false
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cargo-release
        uses: jaxxstorm/action-install-gh-release@v1.14.0
        with:
          repo: crate-ci/cargo-release
          tag: v0.25.17

      - name: Fetch local artifacts
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ inputs.workflow_run_id }}
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true
      
      - name: List artifacts
        run: find target/distrib/
      
      - name: Retrieve version number using cargo-release
        id: version
        run: |
          # Get the version number from the Cargo.toml file
          VERSION=$(cargo metadata --format-version 1 | jq -r ".workspace_members[0]" | cut -d# -f2)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT" 
      
      - name: Create and push release tag
        id: tag
        run: |
          # Create a new tag for the release
          TAG="v${{ steps.version.outputs.version }}"
          git tag "$TAG"
          git push origin "$TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      
      - name: Create GitHub Release
        env:
          PRERELEASE_FLAG: "${{ false && '--prerelease' || '' }}"
          ANNOUNCEMENT_TITLE: "Release ${{ steps.tag.outputs.tag }}"
          ANNOUNCEMENT_BODY: "Automated release created by GitHub Actions."
          RELEASE_COMMIT: "${{ github.sha }}"
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Write and read notes from a file to avoid quoting breaking things
          echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt
          gh release create "${{ steps.tag.outputs.tag }}" --target "$(git rev-list -n 1 ${{ steps.tag.outputs.tag }})" $PRERELEASE_FLAG --title "$ANNOUNCEMENT_TITLE" --notes-file "$RUNNER_TEMP/notes.txt" artifacts/*

      # - name: Create GitHub Release
      #   env:
      #     GH_TOKEN: ${{ steps.app-token.outputs.token }}
      #   run: |
      #     # Determine release tag (use existing tag on HEAD or create one)
      #     TAG=$(git tag --points-at HEAD)
      #     if [ -z "$TAG" ]; then
      #       TAG="v$(date +'%Y%m%d%H%M%S')"
      #       git tag "$TAG"
      #     fi
      #     echo "Creating release for tag: $TAG"
      #     # Create the GitHub Release using the GitHub CLI
      #     gh release create "$TAG" --target "$(git rev-parse HEAD)" --title "Release $TAG" --notes "Automated release created by GitHub Actions." artifacts/*

#     - name: Bump version
#       run: cargo release version --execute --no-confirm ${{ needs.plan.outputs.version }}

#     - id: cargo-dist
#       shell: bash
#       run: |
#         cargo dist build ${{ needs.plan.outputs.tag-flag }} --output-format=json "--artifacts=global" > dist-manifest.json
#         echo "cargo dist ran successfully"

#         # Parse out what we just built and upload it to scratch storage
#         echo "paths<<EOF" >> "$GITHUB_OUTPUT"
#         jq --raw-output ".upload_files[]" dist-manifest.json >> "$GITHUB_OUTPUT"
#         echo "EOF" >> "$GITHUB_OUTPUT"

#         cp dist-manifest.json "$BUILD_MANIFEST_NAME"

#   steps:
#     - id: host
#       shell: bash
#       run: |
#         cargo dist host ${{ needs.plan.outputs.tag-flag }} --steps=upload --steps=release --output-format=json > dist-manifest.json
#         echo "artifacts uploaded and released successfully"
#         cat dist-manifest.json
#         echo "manifest=$(jq -c "." dist-manifest.json)" >> "$GITHUB_OUTPUT"

#     - name: "Upload dist-manifest.json"
#       uses: actions/upload-artifact@v4
#       with:
#         # Overwrite the previous copy
#         name: artifacts-dist-manifest
#         path: ${{ github.workspace }}/dist-manifest.json
#         if-no-files-found: error

# upload:
#   env:
#     AWS_REGION: us-east-1
#     ROLE_NAME: qlty-github-actions
#     QLTY_TEST_RELEASES_AWS_ACCOUNT_ID: 654654321074
#     QLTY_RELEASES_PUBLIC_BUCKET: qlty-releases
#   steps:
#     - name: Setup AWS CLI
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         role-to-assume: arn:aws:iam::${{ env.QLTY_TEST_RELEASES_AWS_ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
#         role-session-name: github-actions
#         aws-region: ${{ env.AWS_REGION }}


#     - name: Upload to S3
#       working-directory: artifacts
#       env:
#         S3_PREFIX: s3://${{ env.QLTY_RELEASES_PUBLIC_BUCKET }}/qlty
#       run: |
#         aws s3 cp --recursive . $S3_PREFIX/${{ needs.plan.outputs.tag }}/
#         aws s3 cp --recursive $S3_PREFIX/${{ needs.plan.outputs.tag }}/ $S3_PREFIX/latest/



#     # Configure git, remove the action token form headers and add the app token
#     - name: Configure git for release commit
#       run: |
#         git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
#         git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

# - name: Bump qlty version
#         run: |
#           cargo release version --no-confirm --execute ${{ needs.plan.outputs.version }}
#           git add Cargo.*
#           git commit -m "ðŸš€ Release: ${{ needs.plan.outputs.tag }}"
#           git tag ${{ needs.plan.outputs.tag }}
#           git push origin main ${{ needs.plan.outputs.tag }}

